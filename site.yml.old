---
- hosts: aaaservers
  name: Deployment
  gather_facts: no
  remote_user: root
  #strategy: debug

  tasks:

# Install python for ansible authorized_key update 

    - name: install python bindings for SELinux
      yum: name={{item}} state=present
      with_items:
      - libselinux-python
      - libsemanage-python

    - name: test to see if SELinux is running
      command: getenforce
      register: sestatus
      changed_when: false
    
    - name: Install my SSH public keys on Remote Servers
      authorized_key: user=root state=present key="{{ lookup('file', lookup('env','HOME') + '/.ssh/id_rsa.pub') }}"
    

# Backup old files

    - name: copy previous load conf files
      command: cp -R {{ aaa_directory }}/conf {{ conf_backup_dir }}
      ignore_errors: yes
      register: isExist


# AAA bundle upload operations 

    - name: create temp directory
      file: path=/tmp/AAA state=directory

    - name: retrieve bundle list from directory
      local_action: find paths="." patterns="MS_*.tar.gz"
      register: bundle

    - name: upload bundle
      copy: src={{ bundle.files.0.path }} dest=/tmp/AAA

    - name: create aaa directory
      file: path={{ aaa_directory }}/AAAServer state=directory

    - name: unarchive bundle file
      unarchive: src=/tmp/AAA/{{ bundle.files.0.path }} dest=/tmp/AAA remote_src=True
   
    - name: retrieve AAA tar
      find: paths="/tmp/AAA" patterns="drs_*.tar.gz"
      register: aaafile

    - name: unarchive AAA file
      unarchive: src={{ aaafile.files.0.path }} dest={{ aaa_directory }}/AAAServer remote_src=True

    - name: delete temp directory
      file: path=/tmp/AAA state=absent


# Reload Actual Conf files
    - block:
       - name: copy actual conf files
         command: cp -R {{ conf_backup_dir }} {{ aaa_directory }}/AAAServer/

       - name: remove backup file
         file: path={{ conf_backup_dir }} state=absent
      when: isExist|succeeded

# Generate conf files which specific for each server and upload
    - block:
      - name: generate SystemConfig from template and upload
        template: src=SystemConfig.xml.j2 dest={{ aaa_directory }}/conf/SystemConfig.xml

      - name: generate PeerConfig from template and upload
        template: src=PeerConfig.xml.j2 dest={{ aaa_directory }}/conf/PeerConfig.xml

      - name: generate AAAConfig from template and upload
        template: src=AAAConfig.xml.j2 dest={{ aaa_directory }}/conf/AAAConfig.xml
    when: isExist|failed

# AAA kill active process & start the latest load

    - name: check if AAA is running
      command: pgrep drs
      register: drs_pid
      ignore_errors: yes

#    - name: print aaa process ids 
#      debug: msg="{{ drs_pid.stdout_lines }}"
#      ignore_errors: yes

    - name: message everybody logged to Servers
      command: wall *****AAA will be down in 30 seconds!***** 'beep'

#    - name: Pause 30 seconds
#      pause: seconds=30

    - name: kill aaa processes
      shell: pgrep drs | xargs kill -2
      when: drs_pid|succeeded

    - name: start latest AAA 
      shell: ./rundrs.sh &
      args:
        chdir: {{ aaa_directory }}

    - name: message everybody logged to Servers
      command: wall *****AAA is online again!***** 'beep'
