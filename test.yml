
- hosts: test
  name: Deployment
  gather_facts: no
  remote_user: root
  #strategy: debug

  tasks:

    - name: generate parameter file for AAAServer
      local_action: template src=roles/test/templates/params{{ item }}.j2 dest=roles/test/files/{{ item }}/cf/params
      with_items:
        - server
        - proxy


  # - name: Login to MS
  #   uri:
  #     url: http://{{ ansible_host }}:8080/login?username=demo&password=demo
  #     method: POST
  #     force_basic_auth: yes
       #body: "username=demo&password=demo"
  #     status_code: 302
  #     headers:
  #       Content-Type: "application/json"
  #   register: login

   #- name: Send AddInstance Request to MS
   #  uri:
   #    url: http://{{ ansible_host }}:8080/instances
   #    method: POST
   #    force_basic_auth: yes
   #    status_code: 200
   #    body_format: json
   #    body: "{{ lookup('file','{{ item }}') }}"
   #    headers:
   #      Content-Type: "application/json"
   #      Cookie: "{{login.set_cookie}}"
   #  with_fileglob:
   #    - "roles/ms/files/*.json"
    #- name: dict test
    #   debug: var=


    #- name: print json files
    #  local_action: command cat {{ item }}
    #  with_fileglob:
    #    - "roles/ms/files/*.json"


    #- name: Login to MS
    #  uri:
    #    url: http://{{ ansible_host }}:8080/login?username=demo&password=demo
    #    method: POST
    #    body: "username=demo&password=demo"
    #    status_code: 302
    #    headers:
    #      Content-Type: "application/json"
    #  register: login

    #- name: Send AddInstance Request to MS
    #  uri:
    #    url: http://{{ ansible_host }}:8080/instances
    #    method: POST
    #    status_code: 200
    #    body_format: json
    #    #body: "{{ item }}"
    #    body: "{{ lookup('file','{{ item }}') }}"
    #    headers:
    #      Content-Type: "application/json"
    #      Cookie: "{{login.set_cookie}}"
    #  with_fileglob:
    #    - "roles/ms/files/*.json"


    #- name: find json files under dir roles/ms/files
    #  local_action: find paths="roles/ms/files" patterns="*.json" recurse=yes
    #  register: fileList
    
    #- debug: 
    #    msg: "{{ item }}"
    #  with_fileglob:
    #    - "roles/ms/files/*.json"

    #- name: create conf backup directory
    #  file: path={{ conf_backup_dir }} state=directory
    #  become: yes

    #- name: backup previous load conf files
    #  command: cp -a {{ aaa_directory }}/conf {{ conf_backup_dir }}
    #  become: yes
      #ignore_errors: yes
    #  register: isExist

    #- uri:
    #    url: http://{{ ansible_host }}:8080/login?username=demo&password=demo
    #    method: POST
    #    body: "username=demo&password=demo"
    #    status_code: 302
    #    headers:
    #      Content-Type: "application/json"
    #  register: login

    #- debug: msg="{{  login }}"

    #- uri:
    #    url: http://{{ ansible_host }}:8080/instances
    #    method: POST
    #    #return_content: yes
    #    #force_basic_auth: yes
    #    status_code: 200
    #    body_format: json
    #    body: "{{ lookup('file','body.json') }}"
    #    headers:
    #      Content-Type: "application/json"
    #      Cookie: "{{login.set_cookie}}"
    #  register: login

    #- debug: msg="{{  login }}"

  #- name: retrieve bundle list from directory
  #  local_action: find paths="/roles"
  #  register: bundle

#- name: upload bundle
#  copy: src={{ bundle.files.0.path }} dest={{ temp_dir }}

    #- name: retrieve bundle list from directory
    #  local_action: find paths="roles/aaa/files" patterns="MS_*.tar.gz"
    #  register: bundle

    #- debug: var={{ bundle.matched }}
    #- debug: var={{ bundle.examined }}
    #- debug: msg="{{ bundle.files.0.path | basename }}"

    #- name: understanding parameter using 
    #- debug: msg="{{ inventory_hostname }}"

    #- debug: msg="{{ ansible_host }}"
    #- name: generate SystemConfig from template and upload
    #  template: src=SystemConfig.xml.j2 dest={{ aaa_directory }}/conf/SystemConfig.xml

    #- name: generate PeerConfig from template and upload
    #  template: src=PeerConfig.xml.j2 dest={{ aaa_directory }}/conf/PeerConfig.xml

    #- name: generate AAAConfig from template and upload
    #  template: src=AAAConfig.xml.j2 dest={{ aaa_directory }}/conf/AAAConfig.xml

# Check if AAA is running

#    - name: Check opened ports by AAA
#      shell: netstat -peanut | grep drs | grep 3868
#      ignore_errors: yes
#      register: isExist

#    - name: print aaa process ids 
#      debug: msg="{{ isExist.stdout_lines }}"


